"""
Handlers para administraci√≥n del canal gratuito.
"""
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from utils.user_roles import is_admin
from utils.menu_manager import menu_manager
from services.free_channel_service import FreeChannelService
from services.config_service import ConfigService
from keyboards.inline_post_kb import get_reaction_kb
from keyboards.free_channel_admin_kb import (
    get_free_channel_admin_kb,
    get_wait_time_selection_kb,
    get_channel_post_options_kb,
    get_content_protection_kb
)

router = Router()


class FreeChannelStates(StatesGroup):
    """Estados para configuraci√≥n del canal gratuito."""
    waiting_for_channel_id = State()
    waiting_for_wait_time = State()
    waiting_for_post_text = State()
    waiting_for_media_files = State()
    confirming_post = State()


@router.callback_query(F.data == "admin_free_channel")
async def free_channel_admin_menu(callback: CallbackQuery, session: AsyncSession):
    """Men√∫ principal de administraci√≥n del canal gratuito."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    free_service = FreeChannelService(session, callback.bot)
    stats = await free_service.get_channel_statistics()
    
    if stats["channel_configured"]:
        status_text = f"‚úÖ **Canal Configurado**\n"
        status_text += f"üìã **ID**: `{stats['channel_id']}`\n"
        if stats.get("channel_title"):
            status_text += f"üì¢ **T√≠tulo**: {stats['channel_title']}\n"
        if stats.get("channel_member_count"):
            status_text += f"üë• **Miembros**: {stats['channel_member_count']}\n"
        status_text += f"‚è∞ **Tiempo de espera**: {stats['wait_time_minutes']} minutos\n"
        status_text += f"üìã **Solicitudes pendientes**: {stats['pending_requests']}\n"
        status_text += f"‚úÖ **Total procesadas**: {stats['total_processed']}"
    else:
        status_text = "‚ùå **Canal no configurado**\n\nConfigura tu canal gratuito para comenzar."
    
    text = f"üÜì **Administraci√≥n Canal Gratuito**\n\n{status_text}"
    
    await menu_manager.update_menu(
        callback,
        text,
        get_free_channel_admin_kb(stats["channel_configured"]),
        session,
        "admin_free_channel"
    )
    await callback.answer()


@router.callback_query(F.data == "configure_free_channel")
async def configure_free_channel(callback: CallbackQuery, state: FSMContext):
    """Iniciar configuraci√≥n del canal gratuito."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await callback.message.edit_text(
        "üÜì **Configurar Canal Gratuito**\n\n"
        "Para configurar tu canal gratuito, reenv√≠a cualquier mensaje del canal aqu√≠.\n"
        "El bot detectar√° autom√°ticamente el ID del canal.\n\n"
        "**Importante**: Aseg√∫rate de que el bot sea administrador del canal "
        "con permisos para aprobar solicitudes de uni√≥n.",
        reply_markup=get_free_channel_admin_kb(False)
    )
    
    await state.set_state(FreeChannelStates.waiting_for_channel_id)
    await callback.answer()


@router.message(FreeChannelStates.waiting_for_channel_id)
async def process_free_channel_id(message: Message, state: FSMContext, session: AsyncSession):
    """Procesar ID del canal gratuito."""
    if not await is_admin(message.from_user.id, session):
        return
    
    channel_id = None
    channel_title = None
    
    if message.forward_from_chat:
        channel_id = message.forward_from_chat.id
        channel_title = message.forward_from_chat.title
    else:
        try:
            channel_id = int(message.text.strip())
        except ValueError:
            await menu_manager.send_temporary_message(
                message,
                "‚ùå **ID Inv√°lido**\n\nPor favor, reenv√≠a un mensaje del canal o ingresa un ID v√°lido.",
                auto_delete_seconds=5
            )
            return
    
    # Configurar el canal
    free_service = FreeChannelService(session, message.bot)
    success = await free_service.set_free_channel_id(channel_id)
    
    if success:
        title_text = f" ({channel_title})" if channel_title else ""
        await menu_manager.show_menu(
            message,
            f"‚úÖ **Canal Gratuito Configurado**\n\n"
            f"**ID del Canal**: `{channel_id}`{title_text}\n\n"
            f"El canal ha sido configurado exitosamente. Los usuarios podr√°n "
            f"solicitar unirse y ser√°n aprobados autom√°ticamente seg√∫n el tiempo de espera configurado.",
            get_free_channel_admin_kb(True),
            session,
            "admin_free_channel"
        )
    else:
        await menu_manager.send_temporary_message(
            message,
            "‚ùå **Error de Configuraci√≥n**\n\nNo se pudo configurar el canal. Intenta nuevamente.",
            auto_delete_seconds=5
        )
    
    await state.clear()


@router.callback_query(F.data == "set_wait_time")
async def set_wait_time_menu(callback: CallbackQuery, session: AsyncSession):
    """Men√∫ para configurar tiempo de espera."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    free_service = FreeChannelService(session, callback.bot)
    current_wait = await free_service.get_wait_time_minutes()
    
    await callback.message.edit_text(
        f"‚è∞ **Configurar Tiempo de Espera**\n\n"
        f"**Tiempo actual**: {current_wait} minutos\n\n"
        f"Selecciona el nuevo tiempo de espera para aprobar autom√°ticamente "
        f"las solicitudes de uni√≥n al canal gratuito:",
        reply_markup=get_wait_time_selection_kb()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("wait_time_"))
async def set_wait_time_value(callback: CallbackQuery, session: AsyncSession):
    """Establecer tiempo de espera espec√≠fico."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    minutes = int(callback.data.split("_")[-1])
    
    free_service = FreeChannelService(session, callback.bot)
    success = await free_service.set_wait_time_minutes(minutes)
    
    if success:
        if minutes == 0:
            time_text = "inmediatamente"
        elif minutes < 60:
            time_text = f"{minutes} minutos"
        else:
            hours = minutes // 60
            remaining_minutes = minutes % 60
            if remaining_minutes > 0:
                time_text = f"{hours} horas y {remaining_minutes} minutos"
            else:
                time_text = f"{hours} horas"
        
        await callback.answer(f"‚úÖ Tiempo configurado: {time_text}", show_alert=True)
        await free_channel_admin_menu(callback, session)
    else:
        await callback.answer("‚ùå Error al configurar el tiempo", show_alert=True)


@router.callback_query(F.data == "create_invite_link")
async def create_invite_link(callback: CallbackQuery, session: AsyncSession):
    """Crear enlace de invitaci√≥n para el canal gratuito."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    free_service = FreeChannelService(session, callback.bot)
    invite_link = await free_service.create_invite_link(
        expire_hours=168,  # 7 d√≠as
        creates_join_request=True
    )
    
    if invite_link:
        await callback.message.edit_text(
            f"üîó **Enlace de Invitaci√≥n Creado**\n\n"
            f"**Enlace**: `{invite_link}`\n\n"
            f"üìã **Caracter√≠sticas**:\n"
            f"‚Ä¢ Expira en 7 d√≠as\n"
            f"‚Ä¢ Requiere aprobaci√≥n (solicitud de uni√≥n)\n"
            f"‚Ä¢ Los usuarios ser√°n aprobados autom√°ticamente seg√∫n el tiempo configurado\n\n"
            f"Comparte este enlace para que los usuarios puedan solicitar unirse al canal gratuito.",
            reply_markup=get_free_channel_admin_kb(True)
        )
    else:
        await callback.answer("‚ùå Error al crear el enlace", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data == "send_to_free_channel")
async def send_to_free_channel_menu(callback: CallbackQuery, state: FSMContext):
    """Men√∫ para enviar contenido al canal gratuito."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await callback.message.edit_text(
        "üìù **Enviar Contenido al Canal Gratuito**\n\n"
        "Env√≠a el texto que deseas publicar en el canal gratuito.\n"
        "Despu√©s podr√°s agregar multimedia y configurar la protecci√≥n del contenido.",
        reply_markup=get_free_channel_admin_kb(True)
    )
    
    await state.set_state(FreeChannelStates.waiting_for_post_text)
    await callback.answer()


@router.message(FreeChannelStates.waiting_for_post_text)
async def process_post_text(message: Message, state: FSMContext):
    """Procesar texto del post."""
    if not await is_admin(message.from_user.id, session):
        return
    
    await state.update_data(post_text=message.text)
    
    await message.answer(
        f"üìù **Texto del Post**\n\n{message.text}\n\n"
        f"¬øDeseas agregar archivos multimedia (fotos, videos, documentos)?",
        reply_markup=get_channel_post_options_kb()
    )
    
    await state.set_state(FreeChannelStates.waiting_for_media_files)


@router.callback_query(FreeChannelStates.waiting_for_media_files, F.data == "add_media")
async def add_media_prompt(callback: CallbackQuery):
    """Solicitar archivos multimedia."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await callback.message.edit_text(
        "üìé **Agregar Multimedia**\n\n"
        "Env√≠a los archivos que deseas incluir (fotos, videos, documentos, audio).\n"
        "Puedes enviar m√∫ltiples archivos.\n\n"
        "Cuando termines, usa el bot√≥n 'Continuar sin multimedia' para proceder.",
        reply_markup=get_channel_post_options_kb()
    )
    await callback.answer()


@router.message(FreeChannelStates.waiting_for_media_files)
async def process_media_files(message: Message, state: FSMContext):
    """Procesar archivos multimedia."""
    if not await is_admin(message.from_user.id, session):
        return
    
    data = await state.get_data()
    media_files = data.get("media_files", [])
    
    # Procesar diferentes tipos de multimedia
    if message.photo:
        media_files.append({
            "type": "photo",
            "file_id": message.photo[-1].file_id,
            "caption": message.caption
        })
    elif message.video:
        media_files.append({
            "type": "video", 
            "file_id": message.video.file_id,
            "caption": message.caption
        })
    elif message.document:
        media_files.append({
            "type": "document",
            "file_id": message.document.file_id,
            "caption": message.caption
        })
    elif message.audio:
        media_files.append({
            "type": "audio",
            "file_id": message.audio.file_id,
            "caption": message.caption
        })
    
    await state.update_data(media_files=media_files)
    
    await message.answer(
        f"üìé **Archivos agregados**: {len(media_files)}\n\n"
        f"Puedes enviar m√°s archivos o continuar con la configuraci√≥n.",
        reply_markup=get_channel_post_options_kb()
    )


@router.callback_query(FreeChannelStates.waiting_for_media_files, F.data == "continue_without_media")
async def continue_without_media(callback: CallbackQuery, state: FSMContext):
    """Continuar sin multimedia."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    data = await state.get_data()
    media_count = len(data.get("media_files", []))
    
    await callback.message.edit_text(
        f"üîí **Configurar Protecci√≥n del Contenido**\n\n"
        f"üìù **Texto**: {data.get('post_text', 'Sin texto')[:100]}...\n"
        f"üìé **Archivos multimedia**: {media_count}\n\n"
        f"¬øDeseas proteger el contenido? (Los usuarios no podr√°n reenviarlo o copiarlo)",
        reply_markup=get_content_protection_kb()
    )
    
    await state.set_state(FreeChannelStates.confirming_post)
    await callback.answer()


@router.callback_query(FreeChannelStates.confirming_post, F.data.startswith("protect_"))
async def confirm_and_send_post(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Confirmar y enviar el post al canal."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    protect_content = callback.data == "protect_yes"
    data = await state.get_data()
    
    free_service = FreeChannelService(session, callback.bot)
    
    config = ConfigService(session)
    buttons = await config.get_reaction_buttons()
    channel_id = await config.get_free_channel_id()
    sent_message = await free_service.send_message_to_channel(
        text=data.get("post_text", ""),
        protect_content=protect_content,
        reply_markup=get_reaction_kb(
            reactions=buttons,
            current_counts={},
            message_id=0,
            channel_id=channel_id or 0,
        ),
        media_files=data.get("media_files", [])
    )

    if sent_message:
        channel_id = await config.get_free_channel_id()
        await callback.bot.edit_message_reply_markup(
            chat_id=channel_id,
            message_id=sent_message.message_id,
            reply_markup=get_reaction_kb(
                reactions=buttons,
                current_counts={},
                message_id=sent_message.message_id,
                channel_id=channel_id or 0,
            ),
        )
    
    if sent_message:
        protection_text = "con protecci√≥n" if protect_content else "sin protecci√≥n"
        media_count = len(data.get("media_files", []))
        
        await callback.message.edit_text(
            f"‚úÖ **Contenido Publicado**\n\n"
            f"El contenido ha sido enviado al canal gratuito {protection_text}.\n\n"
            f"üìù **ID del mensaje**: {sent_message.message_id}\n"
            f"üìé **Archivos incluidos**: {media_count}",
            reply_markup=get_free_channel_admin_kb(True)
        )
    else:
        await callback.message.edit_text(
            f"‚ùå **Error al Publicar**\n\n"
            f"No se pudo enviar el contenido al canal. Verifica que el bot "
            f"tenga permisos de administrador en el canal.",
            reply_markup=get_free_channel_admin_kb(True)
        )
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "process_pending_now")
async def process_pending_now(callback: CallbackQuery, session: AsyncSession):
    """Procesar solicitudes pendientes manualmente."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    free_service = FreeChannelService(session, callback.bot)
    processed_count = await free_service.process_pending_requests()
    
    await callback.answer(
        f"‚úÖ Procesadas {processed_count} solicitudes pendientes",
        show_alert=True
    )
    
    # Actualizar el men√∫ con las nuevas estad√≠sticas
    await free_channel_admin_menu(callback, session)


@router.callback_query(F.data == "cleanup_old_requests")
async def cleanup_old_requests(callback: CallbackQuery, session: AsyncSession):
    """Limpiar solicitudes antiguas."""
    if not await is_admin(callback.from_user.id, session):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    free_service = FreeChannelService(session, callback.bot)
    cleaned_count = await free_service.cleanup_old_requests(days_old=30)
    
    await callback.answer(
        f"üßπ Limpiadas {cleaned_count} solicitudes antiguas",
        show_alert=True
    )
    
    # Actualizar el men√∫
    await free_channel_admin_menu(callback, session)
